DBScribe Report for Project UMAC-UserManagementAccessControl-master
There are 119 database-related methods.


-----------------------------------------------------------

[M-1, LocalSQLMethod] com.marciani.sample.entity.role.dao.RoleDAOImpl.saveRole(Role)
-- This method implements the following db-related operations: 
- It saves or updates role_id, role_name into table roles

-----------------------------------------------------------

[M-3, LocalSQLMethod] com.marciani.sample.entity.role.dao.RoleDAOImpl.deleteRole(Role)
-- This method implements the following db-related operations: 
- It deletes rows from table roles

-----------------------------------------------------------

[M-5, LocalSQLMethod] com.marciani.sample.entity.role.dao.RoleDAOImpl.find(Criterion)
-- This method implements the following db-related operations: 
- It queries the table roles

-----------------------------------------------------------

[M-7, LocalSQLMethod] com.marciani.sample.entity.role.dao.RoleDAOImpl.findAll()
-- This method implements the following db-related operations: 
- It queries the table roles

-----------------------------------------------------------

[M-9, SQLOperatingMethod] com.marciani.sample.entity.role.model.Role.Role(String)
-- This method implements the following db-related operations: 
- It constructs roles with attributes role_name
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- roles.role_name: (nullable = false), (unique = true), (length = 45)

-----------------------------------------------------------

[M-10, SQLOperatingMethod] com.marciani.sample.entity.role.model.Role.Role()
-- This method implements the following db-related operations: 
- It constructs roles without any initial value
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-11, SQLOperatingMethod] com.marciani.sample.entity.role.model.Role.getId()
-- This method implements the following db-related operations: 
- It gets attribute role_id from table roles
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-12, SQLOperatingMethod] com.marciani.sample.entity.role.model.Role.setId(Integer)
-- This method implements the following db-related operations: 
- It sets attribute role_id from table roles
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- roles.role_id: (nullable = false), (unique = true)

-----------------------------------------------------------

[M-13, SQLOperatingMethod] com.marciani.sample.entity.role.model.Role.getRoleName()
-- This method implements the following db-related operations: 
- It gets attribute role_name from table roles
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-14, SQLOperatingMethod] com.marciani.sample.entity.role.model.Role.setRoleName(String)
-- This method implements the following db-related operations: 
- It sets attribute role_name from table roles
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- roles.role_name: (nullable = false), (unique = true), (length = 45)

-----------------------------------------------------------

[M-15, SQLOperatingMethod] com.marciani.sample.entity.role.model.Role.equals(Object)
-- This method implements the following db-related operations: 
- It gets attribute role_name from table roles
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-16, SQLOperatingMethod] com.marciani.sample.entity.role.model.Role.hashCode()
-- This method implements the following db-related operations: 
- It gets attribute role_name from table roles
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-17, SQLOperatingMethod] com.marciani.sample.entity.user.model.Profile.Profile(String, Date)
-- This method implements the following db-related operations: 
- It constructs users_profile with attributes firstname, lastname, email, birth
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users_profile.firstname: (unique = false), (min = 2, max = 30), (NotEmpty = true)
- users_profile.lastname: (unique = false), (min = 2, max = 30), (NotEmpty = true)
- users_profile.email: (unique = false), (Email = true), (NotEmpty = true)
- users_profile.birth: (unique = false), (NotEmpty = true)

-----------------------------------------------------------

[M-18, SQLOperatingMethod] com.marciani.sample.entity.user.model.Profile.Profile()
-- This method implements the following db-related operations: 
- It constructs users_profile without any initial value
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-19, SQLOperatingMethod] com.marciani.sample.entity.user.model.Profile.getId()
-- This method implements the following db-related operations: 
- It gets attribute profile_id from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-20, SQLOperatingMethod] com.marciani.sample.entity.user.model.Profile.setId(Integer)
-- This method implements the following db-related operations: 
- It sets attribute profile_id from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users_profile.profile_id: (unique = true)

-----------------------------------------------------------

[M-21, SQLOperatingMethod] com.marciani.sample.entity.user.model.Profile.getFirstname()
-- This method implements the following db-related operations: 
- It gets attribute firstname from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-22, SQLOperatingMethod] com.marciani.sample.entity.user.model.Profile.setFirstname(String)
-- This method implements the following db-related operations: 
- It sets attribute firstname from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users_profile.firstname: (unique = false), (min = 2, max = 30), (NotEmpty = true)

-----------------------------------------------------------

[M-23, SQLOperatingMethod] com.marciani.sample.entity.user.model.Profile.getLastname()
-- This method implements the following db-related operations: 
- It gets attribute lastname from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-24, SQLOperatingMethod] com.marciani.sample.entity.user.model.Profile.setLastname(String)
-- This method implements the following db-related operations: 
- It sets attribute lastname from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users_profile.lastname: (unique = false), (min = 2, max = 30), (NotEmpty = true)

-----------------------------------------------------------

[M-25, SQLOperatingMethod] com.marciani.sample.entity.user.model.Profile.getEmail()
-- This method implements the following db-related operations: 
- It gets attribute email from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-26, SQLOperatingMethod] com.marciani.sample.entity.user.model.Profile.setEmail(String)
-- This method implements the following db-related operations: 
- It sets attribute email from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users_profile.email: (unique = false), (Email = true), (NotEmpty = true)

-----------------------------------------------------------

[M-27, SQLOperatingMethod] com.marciani.sample.entity.user.model.Profile.getBirth()
-- This method implements the following db-related operations: 
- It gets attribute birth from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-28, SQLOperatingMethod] com.marciani.sample.entity.user.model.Profile.setBirth(Date)
-- This method implements the following db-related operations: 
- It sets attribute birth from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users_profile.birth: (unique = false), (NotEmpty = true)

-----------------------------------------------------------

[M-29, SQLOperatingMethod] com.marciani.sample.entity.user.model.Profile.equals(Object)
-- This method implements the following db-related operations: 
- It gets attribute profile_id from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-30, SQLOperatingMethod] com.marciani.sample.entity.user.model.Profile.hashCode()
-- This method implements the following db-related operations: 
- It gets attribute profile_id from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-31, SQLOperatingMethod] com.marciani.sample.entity.user.model.User.User(String, Role, Profile)
-- This method implements the following db-related operations: 
- It constructs users with attributes username, password, role
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users.username: (unique = true), (min = 3, max = 20), (NotEmpty = true)
- users.password: (unique = false), (min = 3, max = 20), (NotEmpty = true)
- users.role: (nullable = false)

-----------------------------------------------------------

[M-32, SQLOperatingMethod] com.marciani.sample.entity.user.model.User.User(String, Role)
-- This method implements the following db-related operations: 
- It constructs users with attributes username, password, role
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users.username: (unique = true), (min = 3, max = 20), (NotEmpty = true)
- users.password: (unique = false), (min = 3, max = 20), (NotEmpty = true)
- users.role: (nullable = false)

-----------------------------------------------------------

[M-33, SQLOperatingMethod] com.marciani.sample.entity.user.model.User.User()
-- This method implements the following db-related operations: 
- It constructs users without any initial value
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-34, SQLOperatingMethod] com.marciani.sample.entity.user.model.User.getId()
-- This method implements the following db-related operations: 
- It gets attribute user_id from table users
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-35, SQLOperatingMethod] com.marciani.sample.entity.user.model.User.setId(Integer)
-- This method implements the following db-related operations: 
- It sets attribute user_id from table users
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users.user_id: (unique = true)

-----------------------------------------------------------

[M-36, SQLOperatingMethod] com.marciani.sample.entity.user.model.User.getUsername()
-- This method implements the following db-related operations: 
- It gets attribute username from table users
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-37, SQLOperatingMethod] com.marciani.sample.entity.user.model.User.setUsername(String)
-- This method implements the following db-related operations: 
- It sets attribute username from table users
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users.username: (unique = true), (min = 3, max = 20), (NotEmpty = true)

-----------------------------------------------------------

[M-38, SQLOperatingMethod] com.marciani.sample.entity.user.model.User.getPassword()
-- This method implements the following db-related operations: 
- It gets attribute password from table users
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-39, SQLOperatingMethod] com.marciani.sample.entity.user.model.User.setPassword(String)
-- This method implements the following db-related operations: 
- It sets attribute password from table users
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users.password: (unique = false), (min = 3, max = 20), (NotEmpty = true)

-----------------------------------------------------------

[M-40, SQLOperatingMethod] com.marciani.sample.entity.user.model.User.getRole()
-- This method implements the following db-related operations: 
- It gets attribute role from table users
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-41, SQLOperatingMethod] com.marciani.sample.entity.user.model.User.setRole(Role)
-- This method implements the following db-related operations: 
- It sets attribute role from table users
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users.role: (nullable = false)

-----------------------------------------------------------

[M-42, DelegatedSQLMethod] com.marciani.sample.entity.user.model.User.toString()
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.entity.user.model.User.toString --> com.marciani.sample.entity.user.model.Profile.getFirstname
- It gets attribute firstname from table users_profile

Via call-chain: com.marciani.sample.entity.user.model.User.toString --> com.marciani.sample.entity.user.model.Profile.getLastname
- It gets attribute lastname from table users_profile

Via call-chain: com.marciani.sample.entity.user.model.User.toString --> com.marciani.sample.entity.user.model.Profile.getEmail
- It gets attribute email from table users_profile

-----------------------------------------------------------

[M-43, SQLOperatingMethod] com.marciani.sample.entity.user.model.User.equals(Object)
-- This method implements the following db-related operations: 
- It gets attribute username from table users
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-44, SQLOperatingMethod] com.marciani.sample.entity.user.model.User.hashCode()
-- This method implements the following db-related operations: 
- It gets attribute username from table users
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-45, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserInfo.UserInfo(String)
-- This method implements the following db-related operations: 
- It constructs users_info with attributes firstname, lastname, email
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users_info.firstname: (nullable = false), (unique = false), (length = 25)
- users_info.lastname: (nullable = false), (unique = false), (length = 25)
- users_info.email: (nullable = false), (unique = false), (length = 50)

-----------------------------------------------------------

[M-46, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserInfo.UserInfo()
-- This method implements the following db-related operations: 
- It constructs users_info without any initial value
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-47, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserInfo.getFirstname()
-- This method implements the following db-related operations: 
- It gets attribute firstname from table users_info
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-48, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserInfo.setFirstname(String)
-- This method implements the following db-related operations: 
- It sets attribute firstname from table users_info
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users_info.firstname: (nullable = false), (unique = false), (length = 25)

-----------------------------------------------------------

[M-49, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserInfo.getLastname()
-- This method implements the following db-related operations: 
- It gets attribute lastname from table users_info
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-50, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserInfo.setLastname(String)
-- This method implements the following db-related operations: 
- It sets attribute lastname from table users_info
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users_info.lastname: (nullable = false), (unique = false), (length = 25)

-----------------------------------------------------------

[M-51, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserInfo.getEmail()
-- This method implements the following db-related operations: 
- It gets attribute email from table users_info
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-52, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserInfo.setEmail(String)
-- This method implements the following db-related operations: 
- It sets attribute email from table users_info
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users_info.email: (nullable = false), (unique = false), (length = 50)

-----------------------------------------------------------

[M-53, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserProfile.UserProfile(String)
-- This method implements the following db-related operations: 
- It constructs users_profile with attributes firstname, lastname, email
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users_profile.firstname: (unique = false), (min = 2, max = 30), (NotEmpty = true)
- users_profile.lastname: (unique = false), (min = 2, max = 30), (NotEmpty = true)
- users_profile.email: (unique = false), (Email = true), (NotEmpty = true)

-----------------------------------------------------------

[M-54, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserProfile.UserProfile()
-- This method implements the following db-related operations: 
- It constructs users_profile without any initial value
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-55, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserProfile.getId()
-- This method implements the following db-related operations: 
- It gets attribute profile_id from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-56, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserProfile.setId(Integer)
-- This method implements the following db-related operations: 
- It sets attribute profile_id from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users_profile.profile_id: (unique = true)

-----------------------------------------------------------

[M-57, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserProfile.getFirstname()
-- This method implements the following db-related operations: 
- It gets attribute firstname from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-58, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserProfile.setFirstname(String)
-- This method implements the following db-related operations: 
- It sets attribute firstname from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users_profile.firstname: (unique = false), (min = 2, max = 30), (NotEmpty = true)

-----------------------------------------------------------

[M-59, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserProfile.getLastname()
-- This method implements the following db-related operations: 
- It gets attribute lastname from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-60, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserProfile.setLastname(String)
-- This method implements the following db-related operations: 
- It sets attribute lastname from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users_profile.lastname: (unique = false), (min = 2, max = 30), (NotEmpty = true)

-----------------------------------------------------------

[M-61, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserProfile.getEmail()
-- This method implements the following db-related operations: 
- It gets attribute email from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-62, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserProfile.setEmail(String)
-- This method implements the following db-related operations: 
- It sets attribute email from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- users_profile.email: (unique = false), (Email = true), (NotEmpty = true)

-----------------------------------------------------------

[M-63, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserProfile.equals(Object)
-- This method implements the following db-related operations: 
- It gets attribute profile_id from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-64, SQLOperatingMethod] com.marciani.sample.entity.user.model.UserProfile.hashCode()
-- This method implements the following db-related operations: 
- It gets attribute profile_id from table users_profile
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-65, LocalSQLMethod] com.marciani.sample.entity.user.dao.UserDAOImpl.saveUser(User)
-- This method implements the following db-related operations: 
- It saves or updates user_id, username, password, role into table users

-----------------------------------------------------------

[M-67, LocalSQLMethod] com.marciani.sample.entity.user.dao.UserDAOImpl.deleteUser(User)
-- This method implements the following db-related operations: 
- It deletes rows from table users

-----------------------------------------------------------

[M-69, LocalSQLMethod] com.marciani.sample.entity.user.dao.UserDAOImpl.find(Criterion)
-- This method implements the following db-related operations: 
- It queries the table users

-----------------------------------------------------------

[M-71, LocalSQLMethod] com.marciani.sample.entity.user.dao.UserDAOImpl.findAll()
-- This method implements the following db-related operations: 
- It queries the table users

-----------------------------------------------------------

[M-73, LocalSQLMethod] com.marciani.sample.entity.user.dao.UserInfoDAOImpl.saveUserInfo(UserInfo)
-- This method implements the following db-related operations: 
- It saves or updates firstname, lastname, email into table users_info

-----------------------------------------------------------

[M-75, LocalSQLMethod] com.marciani.sample.entity.user.dao.UserInfoDAOImpl.deleteUserInfo(UserInfo)
-- This method implements the following db-related operations: 
- It deletes rows from table users_info

-----------------------------------------------------------

[M-77, LocalSQLMethod] com.marciani.sample.entity.user.dao.UserInfoDAOImpl.find(Criterion)
-- This method implements the following db-related operations: 
- It queries the table users

-----------------------------------------------------------

[M-79, LocalSQLMethod] com.marciani.sample.entity.user.dao.UserProfileDAOImpl.saveUserProfile(Profile)
-- This method implements the following db-related operations: 
- It saves or updates profile_id, firstname, lastname, email, birth into table users_profile

-----------------------------------------------------------

[M-81, LocalSQLMethod] com.marciani.sample.entity.user.dao.UserProfileDAOImpl.deleteUserProfile(Profile)
-- This method implements the following db-related operations: 
- It deletes rows from table users_profile

-----------------------------------------------------------

[M-83, LocalSQLMethod] com.marciani.sample.entity.user.dao.UserProfileDAOImpl.find(Criterion)
-- This method implements the following db-related operations: 
- It queries the table users

-----------------------------------------------------------

[M-85, LocalSQLMethod] com.marciani.sample.entity.user.dao.UserProfileDAOImpl.findAll()
-- This method implements the following db-related operations: 
- It queries the table users

-----------------------------------------------------------

[M-87, DelegatedSQLMethod] com.marciani.sample.entity.mail.service.BusinessMailServiceImpl.sendRegistrationMail(User)
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.entity.mail.service.BusinessMailServiceImpl.sendRegistrationMail --> com.marciani.sample.entity.user.model.Profile.getEmail
- It gets attribute email from table users_profile


-----------------------------------------------------------

[M-88, DelegatedSQLMethod] com.marciani.sample.entity.mail.service.BusinessMailServiceImpl.sendRemovalMail(User)
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.entity.mail.service.BusinessMailServiceImpl.sendRemovalMail --> com.marciani.sample.entity.user.model.Profile.getEmail
- It gets attribute email from table users_profile


-----------------------------------------------------------

[M-89, DelegatedSQLMethod] com.marciani.sample.entity.mail.service.BusinessMailServiceImpl.sendPasswordRecoveryMail(User)
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.entity.mail.service.BusinessMailServiceImpl.sendPasswordRecoveryMail --> com.marciani.sample.entity.user.model.Profile.getEmail
- It gets attribute email from table users_profile


-----------------------------------------------------------

[M-90, DelegatedSQLMethod] com.marciani.sample.entity.mail.service.BusinessMailServiceImpl.sendEditedProfileMail(User)
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.entity.mail.service.BusinessMailServiceImpl.sendEditedProfileMail --> com.marciani.sample.entity.user.model.Profile.getEmail
- It gets attribute email from table users_profile


-----------------------------------------------------------

[M-91, LocalSQLMethod] com.marciani.sample.security.dao.TokenDAOImpl.createToken(Token)
-- This method implements the following db-related operations: 
- It inserts series, username, token, last_used into table persistent_logins

-----------------------------------------------------------

[M-93, LocalSQLMethod] com.marciani.sample.security.dao.TokenDAOImpl.updateToken(Token)
-- This method implements the following db-related operations: 
- It updates series, username, token, last_used into table persistent_logins

-----------------------------------------------------------

[M-95, LocalSQLMethod] com.marciani.sample.security.dao.TokenDAOImpl.deleteToken(Token)
-- This method implements the following db-related operations: 
- It deletes rows from table persistent_logins

-----------------------------------------------------------

[M-97, LocalSQLMethod] com.marciani.sample.security.dao.TokenDAOImpl.find(Criterion)
-- This method implements the following db-related operations: 
- It queries the table persistent_logins

-----------------------------------------------------------

[M-99, SQLOperatingMethod] com.marciani.sample.security.model.Token.setSeries(String)
-- This method implements the following db-related operations: 
- It sets attribute series from table persistent_logins
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- persistent_logins.series: (nullable = false), (length = 64)

-----------------------------------------------------------

[M-100, SQLOperatingMethod] com.marciani.sample.security.model.Token.setUsername(String)
-- This method implements the following db-related operations: 
- It sets attribute username from table persistent_logins
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- persistent_logins.username: (nullable = false), (length = 64)

-----------------------------------------------------------

[M-101, SQLOperatingMethod] com.marciani.sample.security.model.Token.setTokenValue(String)
-- This method implements the following db-related operations: 
- It sets attribute token from table persistent_logins
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- persistent_logins.token: (nullable = false), (length = 64)

-----------------------------------------------------------

[M-102, SQLOperatingMethod] com.marciani.sample.security.model.Token.setLastUsed(Date)
-- This method implements the following db-related operations: 
- It sets attribute last_used from table persistent_logins
*Note: This method will not affect the database util Session built-in function is called

-- Some constraints that should be taken into account are the following: 
- persistent_logins.last_used: (nullable = false)

-----------------------------------------------------------

[M-103, SQLOperatingMethod] com.marciani.sample.security.model.Token.Token(PersistentRememberMeToken)
-- This method implements the following db-related operations: 
- It constructs persistent_logins without any initial value
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-104, DelegatedSQLMethod] com.marciani.sample.security.service.TokenService.createNewToken(PersistentRememberMeToken)
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.security.service.TokenService.createNewToken --> com.marciani.sample.security.model.Token.Token --> com.marciani.sample.security.model.Token.setUsername
- It sets attribute username from table persistent_logins
- It constructs persistent_logins without any initial value

Via call-chain: com.marciani.sample.security.service.TokenService.createNewToken --> com.marciani.sample.security.model.Token.Token --> com.marciani.sample.security.model.Token.setSeries
- It sets attribute series from table persistent_logins
- It constructs persistent_logins without any initial value

Via call-chain: com.marciani.sample.security.service.TokenService.createNewToken --> com.marciani.sample.security.model.Token.Token --> com.marciani.sample.security.model.Token.setLastUsed
- It sets attribute last_used from table persistent_logins
- It constructs persistent_logins without any initial value

Via call-chain: com.marciani.sample.security.service.TokenService.createNewToken --> com.marciani.sample.security.model.Token.Token --> com.marciani.sample.security.model.Token.setTokenValue
- It sets attribute token from table persistent_logins
- It constructs persistent_logins without any initial value


-- Some constraints that should be taken into account are the following: 
- persistent_logins.username: (nullable = false), (length = 64)
- persistent_logins.series: (nullable = false), (length = 64)
- persistent_logins.last_used: (nullable = false)
- persistent_logins.token: (nullable = false), (length = 64)

-----------------------------------------------------------

[M-105, DelegatedSQLMethod] com.marciani.sample.security.service.TokenService.updateToken(String, Date)
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.security.service.TokenService.updateToken --> com.marciani.sample.security.model.Token.setSeries
- It sets attribute series from table persistent_logins

Via call-chain: com.marciani.sample.security.service.TokenService.updateToken --> com.marciani.sample.security.model.Token.setTokenValue
- It sets attribute token from table persistent_logins

Via call-chain: com.marciani.sample.security.service.TokenService.updateToken --> com.marciani.sample.security.model.Token.setLastUsed
- It sets attribute last_used from table persistent_logins


-- Some constraints that should be taken into account are the following: 
- persistent_logins.series: (nullable = false), (length = 64)
- persistent_logins.token: (nullable = false), (length = 64)
- persistent_logins.last_used: (nullable = false)

-----------------------------------------------------------

[M-106, SQLOperatingMethod] com.marciani.sample.security.model.Token.getSeries()
-- This method implements the following db-related operations: 
- It gets attribute series from table persistent_logins
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-107, SQLOperatingMethod] com.marciani.sample.security.model.Token.getUsername()
-- This method implements the following db-related operations: 
- It gets attribute username from table persistent_logins
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-108, SQLOperatingMethod] com.marciani.sample.security.model.Token.getTokenValue()
-- This method implements the following db-related operations: 
- It gets attribute token from table persistent_logins
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-109, SQLOperatingMethod] com.marciani.sample.security.model.Token.getLastUsed()
-- This method implements the following db-related operations: 
- It gets attribute last_used from table persistent_logins
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-110, DelegatedSQLMethod] com.marciani.sample.security.service.TokenService.getTokenForSeries(String)
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.security.service.TokenService.getTokenForSeries --> com.marciani.sample.security.model.Token.getUsername
- It gets attribute username from table persistent_logins

Via call-chain: com.marciani.sample.security.service.TokenService.getTokenForSeries --> com.marciani.sample.security.model.Token.getSeries
- It gets attribute series from table persistent_logins

Via call-chain: com.marciani.sample.security.service.TokenService.getTokenForSeries --> com.marciani.sample.security.model.Token.getTokenValue
- It gets attribute token from table persistent_logins

Via call-chain: com.marciani.sample.security.service.TokenService.getTokenForSeries --> com.marciani.sample.security.model.Token.getLastUsed
- It gets attribute last_used from table persistent_logins

-----------------------------------------------------------

[M-111, DelegatedSQLMethod] com.marciani.sample.security.service.CustomUserDetailsService.loadUserByUsername(String)
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.security.service.CustomUserDetailsService.loadUserByUsername --> com.marciani.sample.entity.user.model.User.getUsername
- It gets attribute username from table users

Via call-chain: com.marciani.sample.security.service.CustomUserDetailsService.loadUserByUsername --> com.marciani.sample.entity.user.model.User.getPassword
- It gets attribute password from table users

Via call-chain: com.marciani.sample.security.service.CustomUserDetailsService.loadUserByUsername --> com.marciani.sample.entity.user.model.User.getRole
- It gets attribute role from table users


-----------------------------------------------------------

[M-112, SQLOperatingMethod] com.marciani.sample.security.model.Token.Token()
-- This method implements the following db-related operations: 
- It constructs persistent_logins without any initial value
*Note: This method will not affect the database util Session built-in function is called

-----------------------------------------------------------

[M-113, DelegatedSQLMethod] com.marciani.sample.security.CustomUserDetailsService.loadUserByUsername(String)
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.security.CustomUserDetailsService.loadUserByUsername --> com.marciani.sample.entity.user.model.User.toString --> com.marciani.sample.entity.user.model.Profile.getFirstname
- It gets attribute firstname from table users_profile

Via call-chain: com.marciani.sample.security.CustomUserDetailsService.loadUserByUsername --> com.marciani.sample.entity.user.model.User.toString --> com.marciani.sample.entity.user.model.Profile.getLastname
- It gets attribute lastname from table users_profile

Via call-chain: com.marciani.sample.security.CustomUserDetailsService.loadUserByUsername --> com.marciani.sample.entity.user.model.User.toString --> com.marciani.sample.entity.user.model.Profile.getEmail
- It gets attribute email from table users_profile

Via call-chain: com.marciani.sample.security.CustomUserDetailsService.loadUserByUsername --> com.marciani.sample.entity.user.model.User.getUsername
- It gets attribute username from table users

Via call-chain: com.marciani.sample.security.CustomUserDetailsService.loadUserByUsername --> com.marciani.sample.entity.user.model.User.getPassword
- It gets attribute password from table users

Via call-chain: com.marciani.sample.security.CustomUserDetailsService.loadUserByUsername --> com.marciani.sample.entity.user.model.User.getRole
- It gets attribute role from table users

-----------------------------------------------------------

[M-114, DelegatedSQLMethod] com.marciani.sample.controller.UserController.manageUsers(ModelMap)
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.controller.UserController.manageUsers --> com.marciani.sample.entity.user.model.User.User
- It constructs users without any initial value

-----------------------------------------------------------

[M-115, DelegatedSQLMethod] com.marciani.sample.util.form.UserForm.toUser()
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.util.form.UserForm.toUser --> com.marciani.sample.entity.user.model.Profile.Profile
- It constructs users_profile with attributes firstname, lastname, email, birth

Via call-chain: com.marciani.sample.util.form.UserForm.toUser --> com.marciani.sample.entity.user.model.User.User
- It constructs users with attributes username, password, role

-- Some constraints that should be taken into account are the following: 
- users_profile.firstname: (unique = false), (min = 2, max = 30), (NotEmpty = true)
- users_profile.lastname: (unique = false), (min = 2, max = 30), (NotEmpty = true)
- users_profile.email: (unique = false), (Email = true), (NotEmpty = true)
- users_profile.birth: (unique = false), (NotEmpty = true)
- users.username: (unique = true), (min = 3, max = 20), (NotEmpty = true)
- users.password: (unique = false), (min = 3, max = 20), (NotEmpty = true)
- users.role: (nullable = false)

-----------------------------------------------------------

[M-116, DelegatedSQLMethod] com.marciani.sample.controller.UserController.saveUser(UserForm, BindingResult)
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.controller.UserController.saveUser --> com.marciani.sample.util.form.UserForm.toUser --> com.marciani.sample.entity.user.model.Profile.Profile
- It constructs users_profile with attributes firstname, lastname, email, birth

Via call-chain: com.marciani.sample.controller.UserController.saveUser --> com.marciani.sample.util.form.UserForm.toUser --> com.marciani.sample.entity.user.model.User.User
- It constructs users with attributes username, password, role

Via call-chain: com.marciani.sample.controller.UserController.saveUser --> com.marciani.sample.entity.user.model.User.toString --> com.marciani.sample.entity.user.model.Profile.getFirstname
- It gets attribute firstname from table users_profile

Via call-chain: com.marciani.sample.controller.UserController.saveUser --> com.marciani.sample.entity.user.model.User.toString --> com.marciani.sample.entity.user.model.Profile.getLastname
- It gets attribute lastname from table users_profile

Via call-chain: com.marciani.sample.controller.UserController.saveUser --> com.marciani.sample.entity.user.model.User.toString --> com.marciani.sample.entity.user.model.Profile.getEmail
- It gets attribute email from table users_profile


-- Some constraints that should be taken into account are the following: 
- users_profile.firstname: (unique = false), (min = 2, max = 30), (NotEmpty = true)
- users_profile.lastname: (unique = false), (min = 2, max = 30), (NotEmpty = true)
- users_profile.email: (unique = false), (Email = true), (NotEmpty = true)
- users_profile.birth: (unique = false), (NotEmpty = true)
- users.username: (unique = true), (min = 3, max = 20), (NotEmpty = true)
- users.password: (unique = false), (min = 3, max = 20), (NotEmpty = true)
- users.role: (nullable = false)

-----------------------------------------------------------

[M-117, DelegatedSQLMethod] com.marciani.sample.controller.UserManagementController.manageUsers(ModelMap)
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.controller.UserManagementController.manageUsers --> com.marciani.sample.entity.user.model.User.User
- It constructs users without any initial value

-----------------------------------------------------------

[M-118, DelegatedSQLMethod] com.marciani.sample.controller.UserManagementController.saveUser(UserForm, BindingResult, ModelMap)
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.controller.UserManagementController.saveUser --> com.marciani.sample.util.form.UserForm.toUser --> com.marciani.sample.entity.user.model.Profile.Profile
- It constructs users_profile with attributes firstname, lastname, email, birth

Via call-chain: com.marciani.sample.controller.UserManagementController.saveUser --> com.marciani.sample.util.form.UserForm.toUser --> com.marciani.sample.entity.user.model.User.User
- It constructs users with attributes username, password, role


-- Some constraints that should be taken into account are the following: 
- users_profile.firstname: (unique = false), (min = 2, max = 30), (NotEmpty = true)
- users_profile.lastname: (unique = false), (min = 2, max = 30), (NotEmpty = true)
- users_profile.email: (unique = false), (Email = true), (NotEmpty = true)
- users_profile.birth: (unique = false), (NotEmpty = true)
- users.username: (unique = true), (min = 3, max = 20), (NotEmpty = true)
- users.password: (unique = false), (min = 3, max = 20), (NotEmpty = true)
- users.role: (nullable = false)

-----------------------------------------------------------

[M-119, DelegatedSQLMethod] com.marciani.sample.controller.UserManagementController.saveEditedUser(UserForm, ModelMap)
-- This method invokes db-related operations via delegation: 
Via call-chain: com.marciani.sample.controller.UserManagementController.saveEditedUser --> com.marciani.sample.util.form.UserForm.toUser --> com.marciani.sample.entity.user.model.Profile.Profile
- It constructs users_profile with attributes firstname, lastname, email, birth

Via call-chain: com.marciani.sample.controller.UserManagementController.saveEditedUser --> com.marciani.sample.util.form.UserForm.toUser --> com.marciani.sample.entity.user.model.User.User
- It constructs users with attributes username, password, role


-- Some constraints that should be taken into account are the following: 
- users_profile.firstname: (unique = false), (min = 2, max = 30), (NotEmpty = true)
- users_profile.lastname: (unique = false), (min = 2, max = 30), (NotEmpty = true)
- users_profile.email: (unique = false), (Email = true), (NotEmpty = true)
- users_profile.birth: (unique = false), (NotEmpty = true)
- users.username: (unique = true), (min = 3, max = 20), (NotEmpty = true)
- users.password: (unique = false), (min = 3, max = 20), (NotEmpty = true)
- users.role: (nullable = false)

-----------------------------------------------------------

