package com.ordersum.model;
import org.hibernate.*;
import com.member.model.MemberDAO;
import com.member.model.MemberVO;
import hibernate.util.HibernateUtil;
import java.sql.Date;
import java.util.*;

public class OrderSumDAO implements OrderSumDAO_Interface {
	private static final String GET_ALL_STMT = "from OrderSumVO order by OrderSumID";
	private static final String GET_BY_OSCID = "from OrderSumVO where OrderCondID=?";
	private static final String GET_BY_OSCET = "from OrderSumVO where ExpectTime=?";
	@Override
	public void insert(OrderSumVO orderSumVO) {
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			session.beginTransaction();
			session.saveOrUpdate(orderSumVO);
			session.getTransaction().commit();
		} catch (RuntimeException ex) {
			session.getTransaction().rollback();
			throw ex;
		}
	}
	@Override
	public void update(OrderSumVO orderSumVO) {
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			session.beginTransaction();
			session.saveOrUpdate(orderSumVO);
			session.getTransaction().commit();
		} catch (RuntimeException ex) {
			session.getTransaction().rollback();
			throw ex;
		}
	}
	@Override
	public void delete(Integer OrderSumID) {
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			session.beginTransaction();
			OrderSumVO orderSumVO = new OrderSumVO();
			orderSumVO.setOrderSumID(OrderSumID);
			session.delete(orderSumVO);
			session.getTransaction().commit();
		} catch (RuntimeException ex) {
			session.getTransaction().rollback();
			throw ex;
		}
	}
	@Override
	public OrderSumVO getByPrimaryKey(Integer OrderSumID) {
		OrderSumVO orderSumVO = null;
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			session.beginTransaction();
			orderSumVO = (OrderSumVO) session.get(OrderSumVO.class, OrderSumID);
			session.getTransaction().commit();
		} catch (RuntimeException ex) {
			session.getTransaction().rollback();
			throw ex;
		}
		return orderSumVO;
	}
	@Override
	public List<OrderSumVO> getByExpectTime(Date ExpectTime) {
		List<OrderSumVO> list = null;
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			session.beginTransaction();
			Query query = session.createQuery(GET_BY_OSCET);
			query.setParameter(0, ExpectTime);
			list = query.list();
			session.getTransaction().commit();
		} catch (RuntimeException ex) {
			session.getTransaction().rollback();
			throw ex;
		}
		return list;
	}
	@Override
	public List<OrderSumVO> getByOrderCondID(Integer OrderCondID) {
		List<OrderSumVO> list = null;
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			session.beginTransaction();
			Query query = session.createQuery(GET_BY_OSCID);
			query.setParameter(0, OrderCondID);
			list = query.list();
			session.getTransaction().commit();
		} catch (RuntimeException ex) {
			session.getTransaction().rollback();
			throw ex;
		}
		return list;
	}
		@Override
	public List<OrderSumVO> getAll() {
		List<OrderSumVO> list = null;
		Session session = HibernateUtil.getSessionFactory().getCurrentSession();
		try {
			session.beginTransaction();
			Query query = session.createQuery(GET_ALL_STMT);
			list = query.list();
			session.getTransaction().commit();
		} catch (RuntimeException ex) {
			session.getTransaction().rollback();
			throw ex;
		}
		return list;
	}
	public static void main(String[] args) {
		OrderSumDAO ordersumdao = new OrderSumDAO();
		//新增
		OrderSumVO ordersumvo1 = new OrderSumVO();   
//		ordersumvo1.setOrderSumID();
//		ordersumvo1.setRestID(2);
//		ordersumvo1.setMemberAcc("Bad5566");
//		ordersumvo1.setMemberPhone("0266316666");
//		ordersumvo1.setCity("台北市");
//		ordersumvo1.setArea	("大安區");
//		ordersumvo1.setAddr("大安路");
//		ordersumvo1.setLatitude(0.0);
//		ordersumvo1.setLongitude(0.0);
//		ordersumvo1.setTotalPrice(500);
//		ordersumvo1.setOrderTime(java.sql.Date.valueOf("2012-12-12"));
//		ordersumvo1.setExpectTime(java.sql.Date.valueOf("2012-12-13"));
//		ordersumvo1.setMemo("讚");
//		ordersumvo1.setOrderCondID(2);
//		ordersumdao.insert(ordersumvo1);
//		java.sql.Date.valueOf("2005-01-01")
//		//修改
//		OrderSumVO ordersumvo2 = new OrderSumVO();
//		ordersumvo2.setRestID(2);
//		ordersumvo2.setMemberAcc("Bad5566");
//		ordersumvo2.setMemberPhone("0266316666");
//		ordersumvo2.setCity("台北市");
//		ordersumvo2.setArea	("大安區");
//		ordersumvo2.setAddr("忠孝東路");
//		ordersumvo2.setLatitude(0.0);
//		ordersumvo2.setLongitude(0.0);
//		ordersumvo2.setTotalPrice(300);
//		ordersumvo2.setOrderTime(java.sql.Date.valueOf("2012-12-12"));
//		ordersumvo2.setExpectTime(java.sql.Date.valueOf("2012-12-13"));
//		ordersumvo2.setMemo("讚");
//		ordersumvo2.setOrderCondID(2);
//		ordersumdao.update(ordersumvo2);
		
//		//刪除(小心cascade - 多方emp2.hbm.xml如果設為 cascade="all"或
//		// cascade="delete"將會刪除所有相關資料-包括所屬部門與同部門的其它員工將會一併被刪除)
//		ordersumdao.delete();
		
//		//findByPrimaryKey (多方emp2.hbm.xml必須設為lazy="false")(優!)
//		getByPrimaryKey
//		OrderSumVO membervo3 = ordersumdao.getByPrimaryKey(5);
//		System.out.print(membervo3.getRestID() + ",");
//		System.out.print(membervo3.getMemberAcc() + ",");
//		System.out.print(membervo3.getMemberPhone() + ",");
//		System.out.print(membervo3.getAddr() + ",");
//		System.out.print(membervo3.getLatitude() + ",");
//		System.out.print(membervo3.getLongitude() + ",");
//		System.out.print(membervo3.getTotalPrice() + ",");
//		System.out.print(membervo3.getOrderTime() + ",");
//		System.out.print(membervo3.getExpectTime() + ",");
//		System.out.print(membervo3.getMemo() + ",");
//		System.out.print(membervo3.getOrderCondID());
//		System.out.println("\n---------------------");
		
//		getByExpectTime
		Date ExpectTime = java.sql.Date.valueOf("2012-12-13");
		List<OrderSumVO> membervo4 = ordersumdao.getByExpectTime(ExpectTime);
		for (OrderSumVO oscet : membervo4) {
			System.out.print(oscet.getOrderSumID() + ",");
			System.out.print(oscet.getRestID() + ",");
			System.out.print(oscet.getMemberAcc() + ",");
			System.out.print(oscet.getMemberPhone() + ",");
			System.out.print(oscet.getAddr() + ",");
			System.out.print(oscet.getLatitude() + ",");
			System.out.print(oscet.getLongitude() + ",");
			System.out.print(oscet.getTotalPrice() + ",");
			System.out.print(oscet.getOrderTime() + ",");
			System.out.print(oscet.getExpectTime() + ",");
			System.out.print(oscet.getMemo() + ",");
			System.out.print(oscet.getOrderCondID());
			System.out.println();
		}
		
//		getByOrderCond
		Integer OrderCondID = 2;
		List<OrderSumVO> membervo5 = ordersumdao.getByOrderCondID(OrderCondID);
		for (OrderSumVO oscid : membervo5) {
			System.out.print(oscid.getOrderSumID() + ",");
			System.out.print(oscid.getRestID() + ",");
			System.out.print(oscid.getMemberAcc() + ",");
			System.out.print(oscid.getMemberPhone() + ",");
			System.out.print(oscid.getAddr() + ",");
		System.out.print(oscid.getLatitude() + ",");
		System.out.print(oscid.getLongitude() + ",");
			System.out.print(oscid.getTotalPrice() + ",");
			System.out.print(oscid.getOrderTime() + ",");
			System.out.print(oscid.getExpectTime() + ",");
			System.out.print(oscid.getMemo() + ",");
			System.out.print(oscid.getOrderCondID());
			System.out.println();
		}
		//印出全部  測試用
		List<OrderSumVO> ordersumlist = ordersumdao.getAll();
		for (OrderSumVO ordersum : ordersumlist) {
			System.out.print(ordersum.getOrderSumID() + ",");
			System.out.print(ordersum.getRestID() + ",");
			System.out.print(ordersum.getMemberAcc() + ",");
			System.out.print(ordersum.getMemberPhone() + ",");
			System.out.print(ordersum.getAddr() + ",");
			System.out.print(ordersum.getTotalPrice() + ",");
			System.out.print(ordersum.getOrderTime() + ",");
			System.out.print(ordersum.getExpectTime() + ",");
			System.out.print(ordersum.getMemo() + ",");
			System.out.print(ordersum.getOrderCondID());
			System.out.println();
		}
	}
}